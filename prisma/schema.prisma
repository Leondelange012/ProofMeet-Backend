// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  firstName         String?
  lastName          String?
  phoneNumber       String?
  dateOfBirth       String?
  courtId           String
  state             String
  courtCaseNumber   String
  isVerified        Boolean   @default(false)
  isHost            Boolean   @default(false)
  accountStatus     AccountStatus @default(PENDING)
  emailVerified     Boolean   @default(false)
  emailVerificationToken String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  hostedMeetings    Meeting[] @relation("HostedMeetings")
  attendanceRecords AttendanceRecord[]
  tokens            AuthToken[]

  @@map("users")
}

model Meeting {
  id              String    @id @default(cuid())
  title           String
  description     String?
  scheduledFor    DateTime
  duration        Int       // minutes
  isActive        Boolean   @default(true)
  zoomMeetingId   String?
  zoomJoinUrl     String?
  qrCode          String?   // For in-person meetings
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  hostId          String
  host            User      @relation("HostedMeetings", fields: [hostId], references: [id])
  attendanceRecords AttendanceRecord[]

  @@map("meetings")
}

model AttendanceRecord {
  id              String    @id @default(cuid())
  joinedAt        DateTime?
  leftAt          DateTime?
  attendanceType  AttendanceType
  isApproved      Boolean   @default(false)
  approvedAt      DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  meetingId       String
  meeting         Meeting   @relation(fields: [meetingId], references: [id])

  @@map("attendance_records")
}

model AuthToken {
  id          String    @id @default(cuid())
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@map("auth_tokens")
}

enum AttendanceType {
  ONLINE
  IN_PERSON
}

enum AccountStatus {
  PENDING
  EMAIL_VERIFIED
  COURT_APPROVED
  ACTIVE
  SUSPENDED
  REJECTED
}